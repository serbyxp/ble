
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>ESP32 BLE HID Control Panel</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      :root {
        color-scheme: dark light;
        font-family: system-ui, -apple-system, "Segoe UI", sans-serif;
        background: #11131c;
        color: #f5f6fa;
      }
      body {
        margin: 0;
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 16px;
        background: radial-gradient(circle at top, #232b45, #0d101d 65%);
      }
      h1 {
        margin: 0;
        text-align: center;
        font-size: 1.7rem;
      }
      section {
        background: rgba(18, 22, 34, 0.88);
        border: 1px solid rgba(90, 120, 220, 0.28);
        border-radius: 12px;
        padding: 16px 18px;
        display: flex;
        flex-direction: column;
        gap: 12px;
        box-shadow: 0 14px 36px rgba(6, 8, 16, 0.45);
      }
      fieldset {
        border: 1px solid rgba(110, 140, 240, 0.25);
        border-radius: 10px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      legend {
        padding: 0 6px;
        font-size: 0.95rem;
        font-weight: 600;
      }
      label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.92rem;
      }
      input[type="text"],
      input[type="number"],
      select,
      textarea {
        flex: 1;
        min-width: 140px;
        padding: 0.5rem 0.6rem;
        border-radius: 8px;
        border: 1px solid rgba(120, 150, 255, 0.25);
        background: rgba(22, 24, 34, 0.9);
        color: inherit;
      }
      textarea {
        min-height: 120px;
        resize: vertical;
      }
      input:focus,
      textarea:focus,
      select:focus {
        outline: none;
        border-color: rgba(150, 200, 255, 0.65);
        box-shadow: 0 0 0 2px rgba(120, 180, 255, 0.25);
      }
      button {
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border: 1px solid rgba(120, 150, 255, 0.35);
        background: linear-gradient(135deg, rgba(70, 110, 255, 0.9), rgba(90, 130, 255, 0.75));
        color: #fdfefe;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.12s ease, box-shadow 0.2s ease;
      }
      button:hover {
        transform: translateY(-1px);
        box-shadow: 0 12px 28px rgba(50, 80, 220, 0.35);
      }
      button.secondary {
        background: rgba(70, 80, 110, 0.85);
        border-color: rgba(120, 140, 200, 0.35);
      }
      .grid {
        display: grid;
        gap: 0.6rem;
      }
      .grid.actions {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      }
      .grid.media {
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      }
      .grid.mouse {
        grid-template-columns: repeat(3, minmax(85px, 1fr));
        justify-items: stretch;
        align-items: center;
      }
      .log {
        max-height: 240px;
        overflow-y: auto;
        padding: 0.85rem;
        border-radius: 10px;
        border: 1px solid rgba(110, 150, 255, 0.25);
        background: rgba(14, 18, 30, 0.85);
        font-family: ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", monospace;
        font-size: 0.84rem;
        line-height: 1.35;
      }
      .row {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
      }
      .row > * {
        flex: 1 1 220px;
      }
      .status {
        font-size: 0.9rem;
        opacity: 0.8;
      }
      small {
        font-size: 0.82rem;
        opacity: 0.72;
      }
      #viewer-container {
        position: relative;
        width: 100%;
        max-height: 60vh;
        aspect-ratio: 16 / 9;
        overflow: hidden;
        border-radius: 12px;
        border: 1px solid rgba(120, 160, 255, 0.25);
        background: #05070f;
      }
      #viewer-container.portrait {
        aspect-ratio: 9 / 16;
      }
      #viewer-container video,
      #viewer-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 100%;
        transform: translate(-50%, -50%);
        object-fit: contain;
        background: #02040a;
      }
      #viewer-container.portrait video,
      #viewer-container.portrait #viewer-overlay {
        transform: translate(-50%, -50%) rotate(90deg);
      }
      #viewer-overlay {
        cursor: crosshair;
        outline: none;
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;
        padding: 0.45rem;
      }
      #viewer-overlay.inactive {
        cursor: default;
      }
      #viewer-overlay.disabled {
        cursor: not-allowed;
        pointer-events: none;
      }
      #overlay-hint {
        background: rgba(0, 0, 0, 0.55);
        padding: 0.35rem 0.65rem;
        border-radius: 6px;
        font-size: 0.8rem;
        letter-spacing: 0.01em;
        transition: opacity 0.2s ease;
      }
      #viewer-overlay.active #overlay-hint {
        opacity: 0.3;
      }
      @media (max-width: 860px) {
        body {
          padding: 12px;
        }
        section {
          padding: 12px 14px;
        }
        .grid.mouse {
          grid-template-columns: repeat(3, minmax(70px, 1fr));
        }
        button {
          font-size: 0.85rem;
        }
      }
    </style>
  </head>
  <body>
    <h1>ESP32 BLE HID Control Panel</h1>

    <section>
      <form id="connection-form" class="row">
        <label>Serial Port <input type="text" id="port-input" placeholder="COM3 or /dev/ttyUSB0" /></label>
        <label
          >Baud
          <select id="baud-input">
            <option value="9600">9600</option>
            <option value="19200">19200</option>
            <option value="38400">38400</option>
            <option value="57600">57600</option>
            <option value="115200" selected>115200</option>
            <option value="230400">230400</option>
            <option value="460800">460800</option>
          </select>
        </label>
        <button type="submit">Connect</button>
      </form>
      <div class="status" id="connection-status">
        Not connected. Configure the serial port then click Connect.
      </div>
    </section>

    <section>
      <fieldset>
        <legend>Remote Viewer</legend>
        <div id="viewer-container" class="landscape">
          <video id="remote-video" autoplay muted playsinline></video>
          <div id="viewer-overlay" class="inactive disabled" tabindex="0">
            <div id="overlay-hint">Control disabled</div>
          </div>
        </div>
        <div class="row">
          <label><input type="checkbox" id="overlay-enable" checked /> Enable capture</label>
          <button type="button" class="secondary" id="overlay-release">Release Control</button>
          <button type="button" class="secondary" id="orientation-toggle">Orientation: Landscape</button>
          <label>Sensitivity <input type="number" id="overlay-sensitivity" value="1.4" min="0.2" max="5" step="0.1" /></label>
        </div>
        <small>
          Attach your GStreamer/uxplayer feed to the <code>#remote-video</code> element. While capture is enabled and the
          pointer stays inside the frame, keyboard and mouse input is forwarded to the ESP32.
        </small>
      </fieldset>
    </section>

    <section>
      <fieldset>
        <legend>Keyboard Text Output</legend>
        <textarea id="text-input" placeholder="Type text to send..."></textarea>
        <div class="row">
          <label><input type="checkbox" id="text-newline" checked /> Append newline</label>
          <label>Character delay (ms) <input type="number" id="text-delay" value="6" min="0" max="1000" /></label>
          <label>Repeat <input type="number" id="text-repeat" value="1" min="1" max="10" /></label>
          <button type="button" id="text-send">Send Text</button>
        </div>
      </fieldset>

      <fieldset>
        <legend>Quick Key Combos</legend>
        <div class="grid actions" id="combo-buttons">
          <button type="button" data-keys="ENTER" data-hold="40">Enter</button>
          <button type="button" data-keys="CTRL,ALT,DELETE" data-hold="150">Ctrl + Alt + Delete</button>
          <button type="button" data-keys="CTRL,C" data-hold="40">Copy (Ctrl+C)</button>
          <button type="button" data-keys="CTRL,V" data-hold="40">Paste (Ctrl+V)</button>
          <button type="button" data-keys="CTRL,Z" data-hold="40">Undo (Ctrl+Z)</button>
          <button type="button" data-keys="ALT,TAB" data-hold="200">Alt + Tab</button>
        </div>
      </fieldset>

      <fieldset>
        <legend>Media Keys</legend>
        <div class="grid media" id="media-buttons">
          <button type="button" data-key="KEY_MEDIA_PLAY_PAUSE">Play / Pause</button>
          <button type="button" data-key="KEY_MEDIA_STOP">Stop</button>
          <button type="button" data-key="KEY_MEDIA_PREVIOUS_TRACK">Previous</button>
          <button type="button" data-key="KEY_MEDIA_NEXT_TRACK">Next</button>
          <button type="button" data-key="KEY_MEDIA_VOLUME_DOWN">Volume -</button>
          <button type="button" data-key="KEY_MEDIA_VOLUME_UP">Volume +</button>
          <button type="button" data-key="KEY_MEDIA_MUTE">Mute</button>
        </div>
      </fieldset>
    </section>

    <section>
      <fieldset>
        <legend>Mouse Controls</legend>
        <div class="row">
          <label>Step (px) <input type="number" id="mouse-step" value="25" min="1" max="200" /></label>
          <label>Scroll step <input type="number" id="scroll-step" value="2" min="1" max="50" /></label>
          <label>Listen window (s) <input type="number" id="mouse-listen" value="0.2" min="0" max="2" step="0.05" /></label>
        </div>
        <div class="grid mouse" id="move-buttons">
          <span></span><button type="button" data-dx="0" data-dy="-1">▲</button><span></span>
          <button type="button" data-dx="-1" data-dy="-1">◄▲</button><button type="button" data-dx="0" data-dy="0" data-wheel="1" class="secondary">Scroll ▲</button><button type="button" data-dx="1" data-dy="-1">▲►</button>
          <button type="button" data-dx="-1" data-dy="0">◄</button><button type="button" data-dx="0" data-dy="0" data-pan="-1" class="secondary">Pan ◄</button><button type="button" data-dx="1" data-dy="0">►</button>
          <button type="button" data-dx="-1" data-dy="1">◄▼</button><button type="button" data-dx="0" data-dy="1">▼</button><button type="button" data-dx="1" data-dy="1">▼►</button>
        </div>
        <div class="grid actions" id="click-buttons">
          <button type="button" data-buttons="left">Left Click</button>
          <button type="button" data-buttons="right">Right Click</button>
          <button type="button" data-buttons="middle">Middle Click</button>
          <button type="button" data-buttons="back">Back</button>
          <button type="button" data-buttons="forward">Forward</button>
          <button type="button" data-buttons="left,right">Left + Right</button>
          <button type="button" data-buttons="left,right,middle">Left + Right + Middle</button>
        </div>
      </fieldset>
    </section>

    <section>
      <fieldset>
        <legend>UART Log</legend>
        <div class="log" id="log"></div>
        <div class="row">
          <button type="button" class="secondary" id="clear-log">Clear Log</button>
        </div>
      </fieldset>
    </section>

    <script>
      (() => {
        "use strict";

        const logEl = document.getElementById("log");
        const statusEl = document.getElementById("connection-status");
        const connectBtn = document.querySelector("#connection-form button[type='submit']");
        const portInput = document.getElementById("port-input");
        const baudInput = document.getElementById("baud-input");
        const overlay = document.getElementById("viewer-overlay");
        const remoteContainer = document.getElementById("viewer-container");
        const remoteVideo = document.getElementById("remote-video");
        const overlayHint = document.getElementById("overlay-hint");
        const overlayEnable = document.getElementById("overlay-enable");
        const overlayRelease = document.getElementById("overlay-release");
        const orientationToggle = document.getElementById("orientation-toggle");
        const overlaySensitivityInput = document.getElementById("overlay-sensitivity");
        const mouseStepInput = document.getElementById("mouse-step");
        const scrollStepInput = document.getElementById("scroll-step");
        const mouseListenInput = document.getElementById("mouse-listen");

        const orientationLabels = ["Landscape", "Portrait"];
        let orientationIndex = 0;

        const pressedButtons = new Set();
        const pressedKeys = new Set();
        let overlayActive = false;
        let pointerMoveQueued = false;
        let pendingDx = 0;
        let pendingDy = 0;

        const hidPending = new Map();
        let hidSocket = null;
        let hidReconnectTimer = null;
        let hidRequestId = 0;
        const HID_SOCKET_TIMEOUT_MS = 2000;

        function appendLog(message, type = "info") {
          const line = document.createElement("div");
          const ts = new Date().toLocaleTimeString();
          line.textContent = `[${ts}] ${message}`;
          line.dataset.type = type;
          logEl.appendChild(line);
          logEl.scrollTop = logEl.scrollHeight;
        }

        async function postJson(url, body) {
          const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body),
          });
          if (!response.ok) {
            const text = await response.text();
            throw new Error(text || `Request failed with status ${response.status}`);
          }
          return response.json();
        }

        function clearPendingRequests(error) {
          hidPending.forEach(({ reject, timeout }) => {
            clearTimeout(timeout);
            if (reject) {
              reject(error instanceof Error ? error : new Error(String(error)));
            }
          });
          hidPending.clear();
        }

        function scheduleSocketReconnect() {
          if (hidReconnectTimer) return;
          hidReconnectTimer = setTimeout(() => {
            hidReconnectTimer = null;
            connectHidSocket();
          }, 2000);
        }

        function isSocketReady() {
          return hidSocket !== null && hidSocket.readyState === WebSocket.OPEN;
        }

        function connectHidSocket() {
          if (hidSocket && (hidSocket.readyState === WebSocket.OPEN || hidSocket.readyState === WebSocket.CONNECTING)) {
            return;
          }

          if (overlayHint) {
            overlayHint.textContent = "Connecting...";
          }

          const protocol = window.location.protocol === "https:" ? "wss" : "ws";
          const socketUrl = `${protocol}://${window.location.host}/ws/hid`;

          try {
            hidSocket = new WebSocket(socketUrl);
          } catch (err) {
            appendLog(`Failed to open HID socket: ${err}`, "error");
            hidSocket = null;
            setOverlayActive(false);
            scheduleSocketReconnect();
            updateOverlayState();
            return;
          }

          hidSocket.addEventListener("open", () => {
            appendLog("HID socket connected", "ok");
            if (hidReconnectTimer) {
              clearTimeout(hidReconnectTimer);
              hidReconnectTimer = null;
            }
            updateOverlayState();
          });

          hidSocket.addEventListener("message", (event) => {
            let data;
            try {
              data = JSON.parse(event.data);
            } catch {
              return;
            }
            if (data.type === "hello") {
              return;
            }
            if (typeof data.requestId === "number") {
              const pending = hidPending.get(data.requestId);
              if (pending) {
                clearTimeout(pending.timeout);
                hidPending.delete(data.requestId);
                if (data.status === "ok") {
                  pending.resolve(data);
                } else {
                  pending.reject(new Error(data.detail || (data.responses?.[0] ?? "Request failed")));
                }
              }
              return;
            }
            if (data.status && data.status !== "ok") {
              appendLog(`HID error: ${data.detail || data.responses?.[0] || data.status}`, "error");
            }
          });

        }

